/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */
buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
        mavenCentral()
    }
    dependencies {
        classpath "org.liquibase:liquibase-gradle-plugin:${liquibaseGradlePluginVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootGradlePluginVersion}"
    }
}

apply plugin: 'org.liquibase.gradle'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    maven { url 'http://insecure.repo1.maven.org/maven2/' }
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation "com.puppycrawl.tools:checkstyle:${checkStyleVersion}"
    implementation "org.mybatis:mybatis:${myBatisVersion}"
    implementation "org.postgresql:postgresql:${postgreSQLVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    implementation 'org.springframework.boot:spring-boot-starter'
    
    liquibaseRuntime "org.liquibase:liquibase-core:${liquibaseCoreVersion}"
    liquibaseRuntime "org.postgresql:postgresql:${postgreSQLVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.easymock:easymock:${easyMockVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterApiVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterEngineVersion}"
}

mainClassName = 'com.epam.university.commission.Application'

liquibase {
    activities {
        init {
            changeLogFile"${changeLogFilePathInit}"
            url"${databaseUrlInit}"
            username"${databaseUsernameInit}"
            password"${databasePasswordInit}"
        }
        main {
            changeLogFile"${changeLogFilePathMain}"
            url"${databaseUrlMain}"
            username"${databaseUsernameMain}"
            password"${databasePasswordMain}"
        }
    }
    runList = "init, main"
}

findbugs {
    ignoreFailures = false
    toolVersion = "${findbugsVersion}"
    sourceSets = [sourceSets.main]
    excludeFilter = file("$rootProject.projectDir/tools/findbugs/excludeFilter.xml")
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

checkstyle {
    toolVersion "${checkStyleVersion}"
    configDir = file"$rootProject.projectDir/tools/codeanalysis/"
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('tools/codeanalysis/checkstyle-custom.xsl')
    }
}

group 'university-commission'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
