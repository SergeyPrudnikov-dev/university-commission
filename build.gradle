/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */
buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'org.liquibase:liquibase-gradle-plugin:2.0.4'
    }
}

apply plugin: 'org.liquibase.gradle'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'

repositories {
    maven { url 'http://insecure.repo1.maven.org/maven2/' }
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation group: 'com.puppycrawl.tools', name: 'checkstyle', version: '6.1.1'
    implementation group: 'org.mybatis', name: 'mybatis', version: '3.4.6'
    liquibaseRuntime 'org.liquibase:liquibase-core:3.8.1'
    liquibaseRuntime 'org.postgresql:postgresql:42.0.0'
    testImplementation group: 'org.easymock', name: 'easymock', version: '4.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0'
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.7.0')
}

mainClassName = 'com.epam.university.commission.Application'

liquibase {
    activities {
        init {
            changeLogFile('src/main/resources/liquibase/db/changelog/changelog-init.xml')
            url("${databaseUrlInit}")
            username("${databaseUsernameInit}")
            password("${databasePasswordInit}")
        }
        main {
            changeLogFile('src/main/resources/liquibase/db/changelog/changelog-main.xml')
            url("${databaseUrlMain}")
            username("${databaseUsernameMain}")
            password("${databasePasswordMain}")
        }
    }
    runList = 'init, main'
}

findbugs {
    ignoreFailures = false
    toolVersion = '3.0.1'
    sourceSets = [sourceSets.main]
    excludeFilter = file("$rootProject.projectDir/tools/findbugs/excludeFilter.xml")
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = 'max'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

checkstyle {
    toolVersion '6.1.1'
    configDir = file("$rootProject.projectDir/tools/codeanalysis/")
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('tools/codeanalysis/checkstyle-custom.xsl')
    }
}

group 'university-commission'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

task message1 {
    doLast {
        println info + ' ' + projectName
    }
}

task message2 {
    doLast {
        println 'Message from task'
    }
}

task message3 {
    doFirst {
        println myArg + 'Message from task'
    }
}
/*
 * gradle message3 -PmyArg="Message from console!"
 */

task allMessages(dependsOn: [message1, message2, message3])
/*
 *  gradle allMessages -PmyArg="Message from console!"
 */
